/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './../routes/__root';
import { Route as UserNewImport } from './../routes/user/new';
import { Route as AppointmentNewImport } from './../routes/appointment/new';
import { Route as AgentNewImport } from './../routes/agent/new';

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')();
const UserIndexLazyImport = createFileRoute('/user/')();
const SettingsIndexLazyImport = createFileRoute('/settings/')();
const MapIndexLazyImport = createFileRoute('/map/')();
const AppointmentIndexLazyImport = createFileRoute('/appointment/')();
const AgentIndexLazyImport = createFileRoute('/agent/')();
const UserEditIdLazyImport = createFileRoute('/user/edit/$id')();
const AppointmentDetailsIdLazyImport = createFileRoute(
  '/appointment/details/$id',
)();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/index.lazy').then((d) => d.Route));

const UserIndexLazyRoute = UserIndexLazyImport.update({
  path: '/user/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../routes/user/index.lazy').then((d) => d.Route),
);

const SettingsIndexLazyRoute = SettingsIndexLazyImport.update({
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../routes/settings/index.lazy').then((d) => d.Route),
);

const MapIndexLazyRoute = MapIndexLazyImport.update({
  path: '/map/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/map/index.lazy').then((d) => d.Route));

const AppointmentIndexLazyRoute = AppointmentIndexLazyImport.update({
  path: '/appointment/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../routes/appointment/index.lazy').then((d) => d.Route),
);

const AgentIndexLazyRoute = AgentIndexLazyImport.update({
  path: '/agent/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../routes/agent/index.lazy').then((d) => d.Route),
);

const UserNewRoute = UserNewImport.update({
  path: '/user/new',
  getParentRoute: () => rootRoute,
} as any);

const AppointmentNewRoute = AppointmentNewImport.update({
  path: '/appointment/new',
  getParentRoute: () => rootRoute,
} as any);

const AgentNewRoute = AgentNewImport.update({
  path: '/agent/new',
  getParentRoute: () => rootRoute,
} as any);

const UserEditIdLazyRoute = UserEditIdLazyImport.update({
  path: '/user/edit/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../routes/user/edit.$id.lazy').then((d) => d.Route),
);

const AppointmentDetailsIdLazyRoute = AppointmentDetailsIdLazyImport.update({
  path: '/appointment/details/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../routes/appointment/details.$id.lazy').then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/agent/new': {
      id: '/agent/new';
      path: '/agent/new';
      fullPath: '/agent/new';
      preLoaderRoute: typeof AgentNewImport;
      parentRoute: typeof rootRoute;
    };
    '/appointment/new': {
      id: '/appointment/new';
      path: '/appointment/new';
      fullPath: '/appointment/new';
      preLoaderRoute: typeof AppointmentNewImport;
      parentRoute: typeof rootRoute;
    };
    '/user/new': {
      id: '/user/new';
      path: '/user/new';
      fullPath: '/user/new';
      preLoaderRoute: typeof UserNewImport;
      parentRoute: typeof rootRoute;
    };
    '/agent/': {
      id: '/agent/';
      path: '/agent';
      fullPath: '/agent';
      preLoaderRoute: typeof AgentIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/appointment/': {
      id: '/appointment/';
      path: '/appointment';
      fullPath: '/appointment';
      preLoaderRoute: typeof AppointmentIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/map/': {
      id: '/map/';
      path: '/map';
      fullPath: '/map';
      preLoaderRoute: typeof MapIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/settings/': {
      id: '/settings/';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/user/': {
      id: '/user/';
      path: '/user';
      fullPath: '/user';
      preLoaderRoute: typeof UserIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/appointment/details/$id': {
      id: '/appointment/details/$id';
      path: '/appointment/details/$id';
      fullPath: '/appointment/details/$id';
      preLoaderRoute: typeof AppointmentDetailsIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/user/edit/$id': {
      id: '/user/edit/$id';
      path: '/user/edit/$id';
      fullPath: '/user/edit/$id';
      preLoaderRoute: typeof UserEditIdLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AgentNewRoute,
  AppointmentNewRoute,
  UserNewRoute,
  AgentIndexLazyRoute,
  AppointmentIndexLazyRoute,
  MapIndexLazyRoute,
  SettingsIndexLazyRoute,
  UserIndexLazyRoute,
  AppointmentDetailsIdLazyRoute,
  UserEditIdLazyRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/agent/new",
        "/appointment/new",
        "/user/new",
        "/agent/",
        "/appointment/",
        "/map/",
        "/settings/",
        "/user/",
        "/appointment/details/$id",
        "/user/edit/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/agent/new": {
      "filePath": "agent/new.tsx"
    },
    "/appointment/new": {
      "filePath": "appointment/new.tsx"
    },
    "/user/new": {
      "filePath": "user/new.tsx"
    },
    "/agent/": {
      "filePath": "agent/index.lazy.tsx"
    },
    "/appointment/": {
      "filePath": "appointment/index.lazy.tsx"
    },
    "/map/": {
      "filePath": "map/index.lazy.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.lazy.tsx"
    },
    "/user/": {
      "filePath": "user/index.lazy.tsx"
    },
    "/appointment/details/$id": {
      "filePath": "appointment/details.$id.lazy.tsx"
    },
    "/user/edit/$id": {
      "filePath": "user/edit.$id.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
